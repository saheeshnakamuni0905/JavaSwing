/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface;

import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Business.Course.Course;
import Business.Course.CourseList;
import Business.DegreeList;
import Business.ProfessorList;
import Business.ProfessorLoginList;
import Business.Student;
import Business.StudentList;
import Business.StudentLoginList;
import Business.ThirdPartyList;
/**
 *
 * @author kamuni.saheeshna
 */

public class ProfessorDetailsPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProfessorDetailsPanel
     */
    MainJFrame frame;
    ProfessorList professorList;
    ProfessorLoginList professorLoginList;
    CourseList courseList;
    StudentList studentList;
    StudentLoginList studentLoginList;
    ThirdPartyList thirdPartyList;
    DegreeList degreeList;
    JPanel userProcessContainer;
    
    
    public ProfessorDetailsPanel(JPanel userProcessContainer, ProfessorList professorList, ProfessorLoginList professorLoginList, CourseList courseList,  StudentList studentList, StudentLoginList studentLoginList, ThirdPartyList thirdPartyList, DegreeList degreeList) {
        initComponents();
        this.professorList = professorList;
        this.professorLoginList = professorLoginList;
        this.courseList = courseList; 
        this.studentList = studentList;
        this.studentLoginList =studentLoginList;
        this.thirdPartyList = thirdPartyList;
        this.degreeList = degreeList;
        this.userProcessContainer = userProcessContainer;
    }
    public boolean searchCourseID(String searchCID) {
        for(Course i: courseList.getCourseList())
        {
            if(i.getCourseName().equals(searchCID)){
                return false;
            }
        }
        return true;    
    }  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblProfDetailsTitle = new javax.swing.JLabel();
        lblProfID = new javax.swing.JLabel();
        lblProfName = new javax.swing.JLabel();
        lblProfEmail = new javax.swing.JLabel();
        txtProfID = new javax.swing.JTextField();
        txtProfName = new javax.swing.JTextField();
        txtProfEmail = new javax.swing.JTextField();
        lblCoursesOffered = new javax.swing.JLabel();
        scrollCourses = new javax.swing.JScrollPane();
        tblCourseOffered = new javax.swing.JTable();
        btnProfAddCourse = new javax.swing.JButton();
        btnProfUpdateCourse = new javax.swing.JButton();
        btnProfDelCourse = new javax.swing.JButton();
        btnStudentList = new javax.swing.JButton();
        txtCourseID = new javax.swing.JTextField();
        txtCourseName = new javax.swing.JTextField();
        lblCoursePrice = new javax.swing.JLabel();
        lblDuration = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        txtDuration = new javax.swing.JTextField();
        lblCredits = new javax.swing.JLabel();
        txtCredits = new javax.swing.JTextField();
        lblCourseID = new javax.swing.JLabel();
        lblCourseName = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        lblProfDetailsTitle.setText("Professor Details");

        lblProfID.setText("Professor ID:");

        lblProfName.setText("Name:");

        lblProfEmail.setText("Email ID:");

        lblCoursesOffered.setText(" Courses Offered:");

        tblCourseOffered.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Price", "Duration", "Credits"
            }
        ));
        scrollCourses.setViewportView(tblCourseOffered);

        btnProfAddCourse.setText("Add Course");
        btnProfAddCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfAddCourseActionPerformed(evt);
            }
        });

        btnProfUpdateCourse.setText("Update Course");
        btnProfUpdateCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfUpdateCourseActionPerformed(evt);
            }
        });

        btnProfDelCourse.setText("Delete Course");
        btnProfDelCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProfDelCourseActionPerformed(evt);
            }
        });

        btnStudentList.setText("Student List");
        btnStudentList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentListActionPerformed(evt);
            }
        });

        lblCoursePrice.setText("Course Price:");

        lblDuration.setText("Course Duration:");

        txtPrice.setText(" ");

        txtDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDurationActionPerformed(evt);
            }
        });

        lblCredits.setText("Credits:");

        lblCourseID.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCourseID.setText("COURSE ID:");

        lblCourseName.setText("COURSE NAME:");

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scrollCourses)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCoursesOffered)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblProfName)
                            .addComponent(lblProfID)
                            .addComponent(lblProfEmail))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtProfID, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfName, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblCredits)
                                .addComponent(lblCoursePrice)
                                .addComponent(lblCourseName)
                                .addComponent(lblDuration))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(lblCourseID)))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtCourseID)
                            .addComponent(txtDuration, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCourseName)
                            .addComponent(txtPrice)
                            .addComponent(txtCredits, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnProfAddCourse)
                        .addGap(30, 30, 30)
                        .addComponent(btnProfUpdateCourse)
                        .addGap(18, 18, 18)
                        .addComponent(btnProfDelCourse)))
                .addGap(18, 18, 18)
                .addComponent(btnStudentList)
                .addContainerGap(275, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblProfDetailsTitle)
                .addGap(323, 323, 323))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProfDetailsTitle)
                    .addComponent(jButton1))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProfID)
                    .addComponent(txtProfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblProfName)
                    .addComponent(txtProfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblProfEmail)
                    .addComponent(txtProfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(lblCoursesOffered)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollCourses, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProfAddCourse)
                    .addComponent(btnProfUpdateCourse)
                    .addComponent(btnProfDelCourse)
                    .addComponent(btnStudentList))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblCourseID))
                    .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseName)
                    .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCoursePrice))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDuration))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCredits)
                    .addComponent(txtCredits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnStudentListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentListActionPerformed
        // TODO add your handling code here:
        int flag = 1;
        int selectedRowIndex = tblCourseOffered.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select the Student.");
            return;
        }
        for(int p=0; p < studentList.getStudentList().size(); p++){
            Student s = studentList.getStudentList().get(p);
            System.out.println(" Professor details student name "+ s.getStudentName());
        }
        for(int p=0; p < courseList.getCourseList().size(); p++){
            Course co = courseList.getCourseList().get(p);
            System.out.println(" Professor details course student name "+ co.getStudName());
//            System.out.println(" Professor details course course name "+ co.getCourseName());
//            System.out.println(" Professor details course professor name "+ co.getProfCName());
        }
          
        DefaultTableModel model = (DefaultTableModel) tblCourseOffered.getModel();
        Course selectedCourse = (Course) model.getValueAt(selectedRowIndex, 0);
        
        ProfessorStudentListPanel studentPanel = new ProfessorStudentListPanel(userProcessContainer,professorList, professorLoginList,courseList,studentList,studentLoginList, thirdPartyList, degreeList);
        DefaultTableModel studModel = studentPanel.getEnrolledStu();
        
        studentPanel.setCourseID(selectedCourse.getCourseId());
        studentPanel.setCourseName(selectedCourse.getCourseName());
             studModel.setRowCount(0);
             
             
    for(int l = 0; l < studentList.getStudentList().size(); l++){ 
        Student s = studentList.getStudentList().get(l);
        flag=0;
   
        System.out.println("314" + l);
        System.out.println("315" + flag);
        if(selectedCourse.getStudName().equals(s.getStudentName())){
            System.out.println("316"+ l);
            flag=1;
            System.out.println("319" + flag);         
            Object[] row = new Object[6];
            row[0] = selectedCourse.getProfCName(); 
            row[1] = s;
            row[2] = s.getStudentName();
            row[3] = s.getStudentEmail();
            row[4] = selectedCourse.getFee();  
            studModel.addRow(row);
            System.out.println("327" + flag);
            break;
        }
    }
    
    System.out.println("329" + flag);
    if(flag == 0){
        System.out.println("334" + flag);
        JOptionPane.showMessageDialog(this, "No Student is registered in this course");
    }
    userProcessContainer.add("ProfessorStudentListPanel", studentPanel);
    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
    layout.next(userProcessContainer);
        
    }//GEN-LAST:event_btnStudentListActionPerformed

    private void btnProfAddCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfAddCourseActionPerformed
        // TODO add your handling code here:
        String cID= txtCourseID.getText();
     if(searchCourseID(cID)) {
        DefaultTableModel model = (DefaultTableModel) tblCourseOffered.getModel();
        Course course= courseList.addNewCourse();
        
        course.setCourseId(txtCourseID.getText());
        course.setCourseName(txtCourseName.getText());
        course.setCoursePrice(txtPrice.getText());
        course.setCourseDuration(txtDuration.getText());
        course.setCredits(txtCredits.getText());
        course.setProfCName(txtProfName.getText());
       
        Object[] row = new Object[6];
            row[0] = course; 
            row[1] = course.getCourseName();
            row[2] = course.getCoursePrice();
            row[3] = course.getCourseDuration();
            row[4] = course.getCredits();
            row[5] = course.getProfCName();   
            model.addRow(row);
    
        JOptionPane.showMessageDialog(this, "Course added");
     }
     else{
         JOptionPane.showMessageDialog(this, "Course ID must be unique.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
     }
    }//GEN-LAST:event_btnProfAddCourseActionPerformed

    private void btnProfUpdateCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfUpdateCourseActionPerformed
        // TODO add your handling code here:
    String cID= txtCourseID.getText();
    if(searchCourseID(cID)) {
        String courseName = txtCourseName.getText();
        DefaultTableModel model= (DefaultTableModel) tblCourseOffered.getModel();
        int selectedRowIndex = tblCourseOffered.getSelectedRow();
        Course selectedCourse = (Course) model.getValueAt(selectedRowIndex, 0);
        selectedCourse.setCourseName(courseName);
        selectedCourse.setCourseId(cID);
        selectedCourse.setCoursePrice(txtPrice.getText());
        selectedCourse.setCourseDuration(txtDuration.getText());
        selectedCourse.setCredits(txtCredits.getText());
        model.setValueAt(selectedCourse.getCourseId(), selectedRowIndex, 0);
        model.setValueAt(selectedCourse.getCourseName(), selectedRowIndex, 1);
        model.setValueAt(selectedCourse.getCoursePrice(), selectedRowIndex, 2);
        model.setValueAt(selectedCourse.getCourseDuration(), selectedRowIndex, 3);
        model.setValueAt(selectedCourse.getCredits(), selectedRowIndex, 4);
        }else{
         JOptionPane.showMessageDialog(this, "Course ID must be unique.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
     }
    }//GEN-LAST:event_btnProfUpdateCourseActionPerformed

    private void btnProfDelCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProfDelCourseActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCourseOffered.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCourseOffered.getModel();
        Course selectedCourse = (Course) model.getValueAt(selectedRowIndex, 0);
        courseList.deleteCourse(selectedCourse);
        JOptionPane.showMessageDialog(this, "Course deleted.");
        detailsPopulate();
    }//GEN-LAST:event_btnProfDelCourseActionPerformed

    private void txtDurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDurationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDurationActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProfAddCourse;
    private javax.swing.JButton btnProfDelCourse;
    private javax.swing.JButton btnProfUpdateCourse;
    private javax.swing.JButton btnStudentList;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel lblCourseID;
    private javax.swing.JLabel lblCourseName;
    private javax.swing.JLabel lblCoursePrice;
    private javax.swing.JLabel lblCoursesOffered;
    private javax.swing.JLabel lblCredits;
    private javax.swing.JLabel lblDuration;
    private javax.swing.JLabel lblProfDetailsTitle;
    private javax.swing.JLabel lblProfEmail;
    private javax.swing.JLabel lblProfID;
    private javax.swing.JLabel lblProfName;
    private javax.swing.JScrollPane scrollCourses;
    private javax.swing.JTable tblCourseOffered;
    private javax.swing.JTextField txtCourseID;
    private javax.swing.JTextField txtCourseName;
    private javax.swing.JTextField txtCredits;
    private javax.swing.JTextField txtDuration;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProfEmail;
    private javax.swing.JTextField txtProfID;
    private javax.swing.JTextField txtProfName;
    // End of variables declaration//GEN-END:variables

    public void setProfID(String Id){
        txtProfID.setText(Id);
    }
    
    public void setProfName(String name){
        txtProfName.setText(name);
    }
    
    public String getProfName(){
        return txtProfName.getText();
    }

    public void setProfEmail(String email){
        txtProfEmail.setText(email);
    }
    
    public DefaultTableModel getProfDetailsTable(){
        DefaultTableModel model = (DefaultTableModel) tblCourseOffered.getModel();
        return model;
    }
    
    public void detailsPopulate(){
        DefaultTableModel model = (DefaultTableModel) tblCourseOffered.getModel();
        model.setRowCount(0);

        for (int i = 0; i < courseList.getCourseList().size(); i++){
            Course c = courseList.getCourseList().get(i);
        
            Object[] row = new Object[6];
            row[0] = c; 
            row[1] = c.getCourseName();
            row[2] = c.getCoursePrice();
            row[3] = c.getCourseDuration();
            row[4] = c.getCredits();
            row[5] = c.getProfCName();
               
            model.addRow(row);
        }
    }
    
    private void populateStudTable() {
    DefaultTableModel model = (DefaultTableModel) tblCourseOffered.getModel();
    model.setRowCount(0);
    
    for (int i = 0; i < studentList.getStudentList().size(); i++){
        Student s = studentList.getStudentList().get(i);
       
        Object[] row = new Object[5];
        row[0] = s; 
        row[1] = s.getStudentName();
        row[2] = s.getStudentEmail();
        row[3] = "p";
        row[4] = s.getGPA();

        model.addRow(row);
    }
    }
}
