/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.RoleSelection.ThirdParty;

import Business.Course.Course;
import java.awt.CardLayout;
import javax.swing.JPanel;
import Business.Course.CourseList;
import Business.Degree.Degree;
import Business.Degree.DegreeList;
import Business.Professor.ProfessorList;
import Business.ProfessorLogin.ProfessorLoginList;
import Business.Student.Student;
import Business.Student.StudentList;
import Business.StudentLogin.StudentLoginList;
import Business.ThirdParty.ThirdPartyList;
import UserInterface.RoleSelection.MainJFrame;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kamuni.saheeshna
 */
public class ThirdPartyApprovalPanel extends javax.swing.JPanel {

    /**
     * Creates new form ThirdPartyApprovalPanel
     */
    MainJFrame frame;
    ProfessorList professorList;
    ProfessorLoginList professorLoginList;
    CourseList courseList;
    StudentList studentList;
    StudentLoginList studentLoginList;
    ThirdPartyList thirdPartyList;
    JPanel userProcessContainer;
    DegreeList degreeList; 
    HashMap<String, List<Course>> studentCour;
    
    public ThirdPartyApprovalPanel(JPanel userProcessContainer, ProfessorList professorList, ProfessorLoginList professorLoginList, CourseList courseList,StudentList studentList, StudentLoginList studentLoginList, ThirdPartyList thirdPartyList,HashMap<String, List<Course>> studentCour, DegreeList degreeList) {
        initComponents();
        this.professorList = professorList;
        this.professorLoginList = professorLoginList;
        this.courseList = courseList;
        this.studentList =studentList;
        this.studentLoginList = studentLoginList;  
        this.thirdPartyList = thirdPartyList;
        this.userProcessContainer = userProcessContainer;
        this.studentCour = studentCour;
        this.degreeList =degreeList;
        populateStudTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblApprovalTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblApproval = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnTranscript = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 153, 153));

        lblApprovalTitle.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblApprovalTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblApprovalTitle.setText("Third Party Approval Portal");

        tblApproval.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Full Name", "Degree Name", "Required Credits", "Required GPA", "Student Credits ", "Student GPA", "Degree Status"
            }
        ));
        jScrollPane1.setViewportView(tblApproval);

        btnApprove.setBackground(new java.awt.Color(204, 204, 255));
        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(204, 204, 255));
        btnBack.setText("Logout");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnTranscript.setBackground(new java.awt.Color(204, 204, 255));
        btnTranscript.setText("View Student Transcript");
        btnTranscript.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranscriptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnTranscript)
                    .addComponent(btnApprove))
                .addGap(95, 95, 95))
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnBack)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblApprovalTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnApprove, btnTranscript});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(lblApprovalTitle)
                .addGap(3, 3, 3)
                .addComponent(btnBack)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnApprove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTranscript)
                .addContainerGap(227, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnApprove, btnTranscript});

    }// </editor-fold>//GEN-END:initComponents
    private void populateStudTable() {
    DefaultTableModel model = (DefaultTableModel) tblApproval.getModel();
    model.setRowCount(0);
               
    for (int i = 0; i < studentList.getStudentList().size(); i++) {
        Student s = studentList.getStudentList().get(i);
        Degree d = degreeList.searchDegree(s.getStudDegree());
        Object[] row = new Object[8];
        row[0] = s.getStudentID(); 
        row[1] = s.getStudentName();
        row[2] = s.getStudDegree();
        row[3] = d.getRequiredCredits();
        row[4] = d.getRequiredGPA();
        row[5] = s.getCreditsCompleted();
        row[6] = s.getGPA();
        model.addRow(row);
    }
   }
    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblApproval.getModel();
        int selectedRowIndex = tblApproval.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select the student to grade.");
            return;
        }
      
        Student selectedStudent = (Student) model.getValueAt(selectedRowIndex, 0);
        Degree d = degreeList.searchDegree(selectedStudent.getStudDegree());
        int dReqGPA = Integer.parseInt(d.getRequiredGPA());
        int studGPA = Integer.parseInt(selectedStudent.getGPA());
        
        if(studGPA>= 2 && studGPA<=dReqGPA){
            selectedStudent.setDegreeStatus("Approved");
            JOptionPane.showMessageDialog(this, "Degree Approved");
            tblApproval.setValueAt("Approved", selectedRowIndex, 7);
            
        }
        else {
            selectedStudent.setDegreeStatus("Rejected");
            JOptionPane.showMessageDialog(this, "Rejected. GPA needs to be above 2 to Pass");
            tblApproval.setValueAt("Rejected", selectedRowIndex, 7);
        }
        
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnTranscriptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranscriptActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblApproval.getModel();
        int selectedRowIndex = tblApproval.getSelectedRow();
        if(selectedRowIndex<0){
            JOptionPane.showMessageDialog(this, "Please select the student to grade.");
            return;
        }
      
        Student selectedStudent = (Student) model.getValueAt(selectedRowIndex, 0);
       
        
        if(selectedStudent.getDegreeStatus().equals("Approved"))
        {
            TranscriptPanel panel = new TranscriptPanel(userProcessContainer, professorList, professorLoginList, courseList, studentList, studentLoginList, thirdPartyList,studentCour, degreeList);
            DefaultTableModel transcriptModel = panel.getTblTranscript();
            transcriptModel.setRowCount(0);
            
            panel.setTranscriptStudID(selectedStudent.getStudentID());
            panel.setTranscriptsStudName(selectedStudent.getStudentName());
            panel.setTxtTranscripSCredits(selectedStudent.getCreditsCompleted());
            panel.setTxtTranscriptSCGPA(selectedStudent.getGPA());
            panel.setTxtTranscriptSDegree(selectedStudent.getStudDegree());
            
            for (Map.Entry<String, List<Course>> entry : studentCour.entrySet()) {
                String studentName = entry.getKey();
                List<Course> courses = entry.getValue();
                for(Course c : courses){
                    if(selectedStudent.getStudentName().equals(studentName)){
                        Object rows[] = new Object[1];
                        rows[0] = c.getCourseName();
                        transcriptModel.addRow(rows);
                    }
                }   
            } 
            userProcessContainer.add("TranscriptPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } else{
            
            JOptionPane.showMessageDialog(this, "Degree Rejcted. No Transcript");
        }
        
    }//GEN-LAST:event_btnTranscriptActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnTranscript;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblApprovalTitle;
    private javax.swing.JTable tblApproval;
    // End of variables declaration//GEN-END:variables


    public DefaultTableModel getTblApproval() {
        DefaultTableModel model = (DefaultTableModel) tblApproval.getModel();
        return model;
    }
}
